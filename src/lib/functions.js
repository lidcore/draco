// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var BsAsyncMonad = require("bs-async-monad/src/bsAsyncMonad.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Env$LidcoreDraco = require("./env.js");
var Common$LidcoreDraco = require("../private/common.js");
var Config$LidcoreDraco = require("../config.js");
var Logger$LidcoreDraco = require("./logger.js");
var Firebase$LidcoreDraco = require("../bindings/firebase.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Express$LidcoreBsExpress = require("@lidcore/bs-express/src/express.js");

var running = Firebase$LidcoreDraco.Functions[/* running */0];

function wrap(error, cb) {
  return (function (err, ret) {
      if (err == null) {
        return cb(err, ret);
      } else {
        Config$LidcoreDraco.error_handler(err);
        return Curry._1(error, cb);
      }
    });
}

var partial_arg = true;

function init(param) {
  return Express$LidcoreBsExpress.init(partial_arg, param);
}

function param(req, lbl) {
  return Js_dict.get(Express$LidcoreBsExpress.Request[/* params */2](req), lbl);
}

function params(req) {
  return Express$LidcoreBsExpress.Request[/* params */2](req);
}

function body(req) {
  return Express$LidcoreBsExpress.Request[/* body */0](req);
}

function query(req) {
  var partial_arg = Express$LidcoreBsExpress.Request[/* query */4](req);
  return (function (param) {
      return Js_dict.get(partial_arg, param);
    });
}

var $$Error = Caml_exceptions.create("Functions-LidcoreDraco.Http.Error");

function make_response(prim, prim$1, prim$2, prim$3) {
  var tmp = {
    code: prim,
    body: prim$2
  };
  if (prim$1 !== undefined) {
    tmp.headers = Caml_option.valFromOption(prim$1);
  }
  return tmp;
}

function make_error(code, body) {
  return [
          $$Error,
          make_response(code, undefined, /* `String */[
                -976970511,
                body
              ], /* () */0)
        ];
}

function error(code, msg) {
  var partial_arg = make_error(code, msg);
  var partial_arg$1 = BsAsyncMonad.Callback[/* fail */1];
  return (function (param) {
      return partial_arg$1(partial_arg, param);
    });
}

function response($staropt$star, headers, body) {
  var code = $staropt$star !== undefined ? $staropt$star : 200;
  var headers$1;
  if (headers !== undefined) {
    var headers$2 = { };
    Hashtbl.iter((function (param, param$1) {
            headers$2[param] = param$1;
            return /* () */0;
          }), Caml_option.valFromOption(headers));
    headers$1 = Caml_option.some(headers$2);
  } else {
    headers$1 = undefined;
  }
  return make_response(code, headers$1, body, /* () */0);
}

function authenticate(req) {
  var token = Config$LidcoreDraco.offline ? "blabla" : Env$LidcoreDraco.get(undefined, "AUTHENTICATION_TOKEN");
  var error$1 = error(401, "Unauthorized");
  var match = Js_dict.get(Express$LidcoreBsExpress.Request[/* headers */1](req), "authorization");
  if (match !== undefined) {
    var re = (/Token token=(.+)/);
    var match$1 = re.exec(match);
    if (match$1 !== null && Caml_obj.caml_equal(Caml_array.caml_array_get(match$1, 1), token)) {
      var partial_arg = BsAsyncMonad.Callback[/* return */0];
      return (function (param) {
          return partial_arg(/* () */0, param);
        });
    } else {
      return error$1;
    }
  } else {
    return error$1;
  }
}

function add_route(meth, $staropt$star, app, route, handler) {
  var auth = $staropt$star !== undefined ? $staropt$star : false;
  var match = meth !== 4004527 ? (
      meth >= 892711040 ? /* tuple */[
          "POST",
          Express$LidcoreBsExpress.post
        ] : /* tuple */[
          "GET",
          Express$LidcoreBsExpress.get
        ]
    ) : /* tuple */[
      "PUT",
      Express$LidcoreBsExpress.put
    ];
  var meth$1 = match[0];
  var handler$1 = function (req) {
    var tmp;
    if (auth) {
      tmp = authenticate(req);
    } else {
      var partial_arg = BsAsyncMonad.Callback[/* return */0];
      tmp = (function (param) {
          return partial_arg(/* () */0, param);
        });
    }
    return BsAsyncMonad.Callback[/* >> */3](tmp, (function (param) {
                  return Curry._1(handler, req);
                }));
  };
  return Curry._3(match[1], app, route, (function (req, resp) {
                var url = Express$LidcoreBsExpress.Request[/* originalUrl */5](req);
                Logger$LidcoreDraco.info("Serving " + (String(meth$1) + (" " + (String(url) + ""))));
                var partial_arg = handler$1(req);
                return (function (param) {
                            var handler = partial_arg;
                            var cb = param;
                            var partial_arg$1 = {
                              code: 500,
                              body: /* `String */[
                                -976970511,
                                "Internal server error"
                              ]
                            };
                            var partial_arg$2 = BsAsyncMonad.Callback[/* return */0];
                            var error = function (param) {
                              return partial_arg$2(partial_arg$1, param);
                            };
                            var cb$1 = wrap(error, cb);
                            return Curry._1(handler, (function (err, ret) {
                                          if (!(err == null) && err[0] === $$Error) {
                                            return cb$1(null, err[1]);
                                          } else {
                                            return cb$1(err, ret);
                                          }
                                        }));
                          })((function (err, ret) {
                              if (err == null) {
                                var ret$1 = ret;
                                var resp$1 = resp;
                                var code = ret$1.code;
                                var match = ret$1.headers;
                                var headers = match !== undefined ? match : { };
                                var send_string = function (msg) {
                                  Express$LidcoreBsExpress.Response[/* send */5](Express$LidcoreBsExpress.Response[/* headers */7](Express$LidcoreBsExpress.Response[/* status */9](resp$1, code), headers), msg);
                                  return /* () */0;
                                };
                                var match$1 = ret$1.body;
                                var variant = match$1[0];
                                if (variant !== -976970511) {
                                  if (variant >= 826371656) {
                                    return send_string(JSON.stringify(match$1[1]));
                                  } else {
                                    headers["Transfer-Encoding"] = "chunked";
                                    return Express$LidcoreBsExpress.Response[/* writeHead */10](Express$LidcoreBsExpress.Response[/* pipe */4](match$1[1], resp$1), Caml_option.some(headers), code);
                                  }
                                } else {
                                  return send_string(match$1[1]);
                                }
                              } else {
                                throw [
                                      Caml_builtin_exceptions.assert_failure,
                                      /* tuple */[
                                        "functions.ml",
                                        146,
                                        22
                                      ]
                                    ];
                              }
                            }));
              }));
}

function get(param, param$1, param$2, param$3) {
  return add_route(/* Get */3553398, param, param$1, param$2, param$3);
}

function post(param, param$1, param$2, param$3) {
  return add_route(/* Post */892711040, param, param$1, param$2, param$3);
}

function put(param, param$1, param$2, param$3) {
  return add_route(/* Put */4004527, param, param$1, param$2, param$3);
}

function $$export(app) {
  return Curry._1(Firebase$LidcoreDraco.Functions[/* Https */1][/* from_express */0], app);
}

function subscribe(topic, fn) {
  return Curry._2(Firebase$LidcoreDraco.Functions[/* PubSub */2][/* on_publish */0], topic, (function (message, param) {
                var json = Curry._1(Firebase$LidcoreDraco.Functions[/* PubSub */2][/* json */1], message);
                return BsAsyncMonad.to_promise(BsAsyncMonad.Callback[/* ||> */5](Curry._1(fn, json), (function (exn) {
                                  return BsAsyncMonad.Callback[/* >> */3](Common$LidcoreDraco.requeue(json, topic), (function (param) {
                                                var partial_arg = BsAsyncMonad.Callback[/* fail */1];
                                                return (function (param) {
                                                    return partial_arg(exn, param);
                                                  });
                                              }));
                                })));
              }));
}

var Event = /* module */[/* subscribe */subscribe];

var Http = [
  body,
  param,
  params,
  query,
  response,
  error,
  init,
  get,
  post,
  put,
  $$export
];

exports.running = running;
exports.Http = Http;
exports.Event = Event;
/* Env-LidcoreDraco Not a pure module */
