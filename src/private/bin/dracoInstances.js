// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var BsAsyncMonad = require("bs-async-monad/src/bsAsyncMonad.js");
var Fs$LidcoreBsNode = require("@lidcore/bs-node/src/fs.js");
var Spinner$LidcoreDraco = require("../../bindings/spinner.js");
var Instances$LidcoreDraco = require("../../lib/instances.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var RequireAll$LidcoreDraco = require("../../bindings/requireAll.js");
var DracoCommon$LidcoreDraco = require("./dracoCommon.js");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -237546278,
    "Destroying"
  ],
  /* tuple */[
    816044828,
    "Creating"
  ],
  /* tuple */[
    938930095,
    "Restarting"
  ]
];

DracoCommon$LidcoreDraco.usage(undefined, "instances [create|restart|destroy] [instance-group-name1,instance-group-name2,..]");

var instancesDir = "" + (String(__dirname) + "/../../../../../../src/instances");

if (Fs$LidcoreBsNode.existsSync(instancesDir)) {
  RequireAll$LidcoreDraco.exec(instancesDir);
}

if (DracoCommon$LidcoreDraco.argc < 3) {
  DracoCommon$LidcoreDraco.die(undefined, /* () */0);
}

var match = Caml_array.caml_array_get(DracoCommon$LidcoreDraco.argv, 2);

var operation;

switch (match) {
  case "create" : 
      operation = /* Create */816044828;
      break;
  case "destroy" : 
      operation = /* Destroy */-237546278;
      break;
  case "restart" : 
      operation = /* Restart */938930095;
      break;
  default:
    operation = DracoCommon$LidcoreDraco.die("Invalid mode", /* () */0);
}

var instancesToDeploy;

try {
  instancesToDeploy = Caml_array.caml_array_get(DracoCommon$LidcoreDraco.argv, 3) === "-stage" ? /* [] */0 : $$Array.to_list(Caml_array.caml_array_get(DracoCommon$LidcoreDraco.argv, 3).split(","));
}
catch (raw_exn){
  var exn = Js_exn.internalToOCamlException(raw_exn);
  if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
    if (exn[1] === "index out of bounds") {
      instancesToDeploy = /* [] */0;
    } else {
      throw exn;
    }
  } else {
    throw exn;
  }
}

var config = DracoCommon$LidcoreDraco.config(/* () */0);

var projectId = config.projectId;

var serviceAccount = config.serviceAccount;

var zone = config.zone;

var instances = $$Array.to_list(config.instances);

var instances$1 = instancesToDeploy ? List.map((function (name) {
          try {
            return List.find((function (config) {
                          return config.name === name;
                        }), instances);
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return DracoCommon$LidcoreDraco.die("No config for instance group " + (String(name) + (" in " + (String(DracoCommon$LidcoreDraco.configPath) + ""))), /* () */0);
            } else {
              throw exn;
            }
          }
        }), instancesToDeploy) : instances;

function fn(config) {
  if (operation !== 816044828) {
    if (operation >= 938930095) {
      return Instances$LidcoreDraco.Config[/* restart */1](projectId, zone, config.name);
    } else {
      return Instances$LidcoreDraco.Config[/* destroy */2](projectId, zone, config.name);
    }
  } else {
    return Instances$LidcoreDraco.Config[/* initialize */0](projectId, serviceAccount, zone, config.instanceTemplate, config.autoscaler, config.name);
  }
}

var operation$1 = Js_mapperRt.binarySearch(3, operation, jsMapperConstantArray);

function setups() {
  return BsAsyncMonad.Callback[/* seq */27](undefined, List.map((function (config) {
                    var name = config.name;
                    var spinner = Spinner$LidcoreDraco.init("" + (String(operation$1) + (" " + (String(name) + (" (project: " + (String(projectId) + ").. %s"))))));
                    Spinner$LidcoreDraco.start(spinner);
                    return BsAsyncMonad.Callback[/* &> */9](fn(config), (function () {
                                  Spinner$LidcoreDraco.stop(true, spinner);
                                  Curry._3(Printf.printf(/* Format */[
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* " " */32,
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* String_literal */Block.__(11, [
                                                            " (project: ",
                                                            /* String */Block.__(2, [
                                                                /* No_padding */0,
                                                                /* String_literal */Block.__(11, [
                                                                    ").. done!\n",
                                                                    /* End_of_format */0
                                                                  ])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ]),
                                            "%s %s (project: %s).. done!\n"
                                          ]), operation$1, name, projectId);
                                  var partial_arg = BsAsyncMonad.Callback[/* return */0];
                                  return (function (param) {
                                      return partial_arg(/* () */0, param);
                                    });
                                }));
                  }), instances$1));
}

BsAsyncMonad.Callback[/* finish */29](undefined, BsAsyncMonad.Callback[/* >> */3](Instances$LidcoreDraco.Runtime[/* setup */1](/* () */0), setups));

/*  Not a pure module */
